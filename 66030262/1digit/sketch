// กำหนดขา GPIO ของ ESP32 ที่เชื่อมต่อกับแต่ละ Segment ของ 7-Segment Display
// ขาเหล่านี้ควรตรงกับการต่อวงจรของคุณ
// ตรวจสอบให้แน่ใจว่าขาที่คุณเลือกเป็นขา GPIO ที่ปลอดภัยต่อการใช้งาน (เช่น ไม่ใช่ขาที่ใช้สำหรับ Flash/Boot)
// ตัวอย่างนี้ใช้ GPIO 2, 4, 5, 16, 17, 18, 19
// แต่คุณสามารถเปลี่ยนไปใช้ขาอื่น ๆ ที่เหมาะสมได้ เช่น 2, 13, 14, 15, 27, 26, 25
const int segmentPins[] = {2, 4, 5, 16, 17, 18, 19}; // a, b, c, d, e, f, g (ตามลำดับในอาร์เรย์)

// รูปแบบการเปิด/ปิด Segment สำหรับตัวเลข 0-9 (Common Cathode)
// แต่ละแถวในอาร์เรย์แทนตัวเลข (0-9)
// แต่ละคอลัมน์แทนสถานะของ segment (a, b, c, d, e, f, g)
// 1 = เปิด (HIGH), 0 = ปิด (LOW)
//      a  b  c  d  e  f  g
byte segmentPatterns[10][7] = {
  {1, 1, 1, 1, 1, 1, 0}, // 0
  {0, 1, 1, 0, 0, 0, 0}, // 1
  {1, 1, 0, 1, 1, 0, 1}, // 2
  {1, 1, 1, 1, 0, 0, 1}, // 3
  {0, 1, 1, 0, 0, 1, 1}, // 4
  {1, 0, 1, 1, 0, 1, 1}, // 5
  {1, 0, 1, 1, 1, 1, 1}, // 6
  {1, 1, 1, 0, 0, 0, 0}, // 7A
  {1, 1, 1, 1, 1, 1, 1}, // 8
  {1, 1, 1, 1, 0, 1, 1}  // 9
};

int currentNumber = 0; // ตัวแปรสำหรับเก็บตัวเลขปัจจุบันที่แสดง
const int delayTime = 1000; // หน่วงเวลา 1 วินาที (1000 มิลลิวินาที)

void setup() {
  // เริ่มต้น Serial Monitor เพื่อดูข้อความ Debug (ไม่บังคับ แต่มีประโยชน์)
  Serial.begin(115200);

  // กำหนดให้ทุกขาที่ใช้เป็น OUTPUT
  for (int i = 0; i < 7; i++) {
    pinMode(segmentPins[i], OUTPUT);
  }
}

void loop() {
  // แสดงตัวเลขปัจจุบันบน 7-Segment
  displayNumber(currentNumber);

  // พิมพ์ตัวเลขปัจจุบันออกทาง Serial Monitor (เพื่อตรวจสอบ)
  Serial.print("Displaying: ");
  Serial.println(currentNumber);

  // หน่วงเวลา
  delay(delayTime);

  // เพิ่มตัวเลขขึ้นทีละ 1
  currentNumber++;

  // ถ้าตัวเลขเกิน 9 ให้กลับไปที่ 0
  if (currentNumber > 9) {
    currentNumber = 0;
  }
}

// ฟังก์ชันสำหรับแสดงตัวเลขบน 7-Segment
void displayNumber(int num) {
  // ตรวจสอบว่าตัวเลขอยู่ในช่วง 0-9
  if (num < 0 || num > 9) {
    // ถ้าตัวเลขไม่อยู่ในช่วง ให้แสดง "ว่างเปล่า" หรือ "Error"
    // ในที่นี้จะปิดทุก segment
    for (int i = 0; i < 7; i++) {
      digitalWrite(segmentPins[i], LOW);
    }
    return;
  }

  // วนลูปเพื่อควบคุมแต่ละ Segment ตามรูปแบบของตัวเลขนั้นๆ
  for (int i = 0; i < 7; i++) {
    digitalWrite(segmentPins[i], segmentPatterns[num][i]);
  }
}
